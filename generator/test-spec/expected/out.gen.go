// Package events provides primitives to interact with the asyncAPI.
//
// Code generated by github.com/c0olix/asyncApiCodeGen DO NOT EDIT.
package events

import (
	"context"
	"git.hochbahn.cloud/mosaic/libs/go-microservice-starter-commons.git/messaging"
)

const (
	UserDeletedTopicName = "USER_DELETED"
	UserLockedTopicName  = "USER_LOCKED"
)

// KafkaTopicConfig Holds configuration needed fo create a kafka topic
type KafkaTopicConfig struct {
	TopicGroup        string
	NumPartitions     int
	ReplicationFactor int
}

// UserDeletedEvent A brief description for the UserDeletedEvent
type UserDeletedEvent struct {
	Username string `json:"username"`
}

// UserLockedEvent A brief description for the UserLockedEvent
type UserLockedEvent struct {
	Reason   *string `json:"reason,omitempty"`
	Username string  `json:"username"`
}

// ConsumerInterface Interface for all events to be consumed by application
type ConsumerInterface interface {
	ConsumeUserDeletedEvent(callback messaging.CallbackFunction, errorCallback messaging.ErrorCallbackFunction)
}

// ProducerInterface Interface for all events to be produced by application
type ProducerInterface interface {
	ProduceUserLockedEvent(ctx context.Context, event UserLockedEvent, header ...messaging.KafkaHeader) error
}

// DefaultConsumer implements ConsumerInterface and consumes events with go kafka mosaic style flavor
type DefaultConsumer struct {
	UserDeletedTopic messaging.KafkaTopic
}

// DefaultProducer implements ProducerInterface and produces events with go kafka mosaic style flavor
type DefaultProducer struct {
	UserLockedTopic messaging.KafkaTopic
}

// NewDefaultConsumer wires all needed dependencies to create a DefaultConsumer
func NewDefaultConsumer(manager messaging.KafkaManager, config KafkaTopicConfig) (*DefaultConsumer, error) {
	UserDeletedTopic, err := manager.CreateTopic(UserDeletedTopicName, config.TopicGroup, config.NumPartitions, config.ReplicationFactor)
	if err != nil {
		return nil, err
	}
	return &DefaultConsumer{
		UserDeletedTopic: UserDeletedTopic,
	}, nil
}

// NewDefaultProducer wires all needed dependencies to create a DefaultProducer
func NewDefaultProducer(manager messaging.KafkaManager, config KafkaTopicConfig) (*DefaultProducer, error) {
	UserLockedTopic, err := manager.CreateTopic(UserLockedTopicName, config.TopicGroup, config.NumPartitions, config.ReplicationFactor)
	if err != nil {
		return nil, err
	}
	return &DefaultProducer{
		UserLockedTopic: UserLockedTopic,
	}, nil
}

// ConsumeUserDeletedEvent is the go kafka mosaic style flavored implementation of the ConsumerInterface registered on DefaultConsumer
// to consume the UserDeletedEvent Event.
func (d DefaultConsumer) ConsumeUserDeletedEvent(callback messaging.CallbackFunction, errorCallback messaging.ErrorCallbackFunction) {
	d.UserDeletedTopic.Consume(UserDeletedEvent{}, callback, errorCallback)
}

// ProduceUserLockedEvent is the go kafka mosaic style flavored implementation of the ProducerInterface registered on DefaultConsumer
// to produce the UserLockedEvent Event.
func (d DefaultProducer) ProduceUserLockedEvent(ctx context.Context, event UserLockedEvent, header ...messaging.KafkaHeader) error {
	err := d.UserLockedTopic.Produce(ctx, event, header...)
	if err != nil {
		return err
	}
	return nil
}
