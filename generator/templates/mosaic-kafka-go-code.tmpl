package events

import (
	"context"
	"git.hochbahn.cloud/mosaic/libs/go-microservice-starter-commons.git/messaging"
	{{- range $import := .Imports }}
	"{{$import}}"
	{{- end}}
)

const (
{{- range $channelName, $channel := .Channels }}
	{{$channelName}}TopicName = "{{$channel.Name}}"
{{- end}}
)
type KafkaTopicConfig struct {
	TopicGroup string
	NumPartitions int
	ReplicationFactor int
}
{{ range $event := .Events }}
type {{$event.Message.Name}} struct {
	{{- range $propertyName, $property := $event.Message.Schema.Properties}}
	{{$propertyName}} {{$property.Type -}}
	{{- end}}
}
{{ end}}

{{ range $event := .Events }}
	{{- range $propertyName, $property := $event.Message.Schema.Properties}}
		{{- if $property.Object}}
type {{$property.Object.Name}} struct {
			{{- range $objPropertyName, $objProperty := $property.Object.Properties}}
	{{$objPropertyName}} {{$objProperty.Type -}}
			{{- end}}
}
		{{- end}}
	{{- end}}
{{ end}}
type ConsumerInterface interface {
{{ range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
	Consume{{$channelName}}Event(callback messaging.CallbackFunction, errorCallback messaging.ErrorCallbackFunction)
	{{- end}}
{{- end}}
}

type ProducerInterface interface {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Subscribe}}
	Produce{{$channelName}}Event(ctx context.Context, event {{$channelName}}Event, header ...messaging.KafkaHeader) error
	{{- end}}
{{- end}}
}

type DefaultConsumer struct {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
	{{$channelName}}Topic messaging.KafkaTopic
	{{- end}}
{{- end}}
}

type DefaultProducer struct {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Subscribe}}
	{{$channelName}}Topic messaging.KafkaTopic
	{{- end}}
{{- end}}
}

func NewDefaultConsumer(manager messaging.KafkaManager, config KafkaTopicConfig) (*DefaultConsumer, error) {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
	{{$channelName}}Topic, err := manager.CreateTopic({{$channelName}}TopicName, config.TopicGroup, config.NumPartitions, config.ReplicationFactor)
	if err != nil {
		return nil, err
	}
	{{- end}}
{{- end}}
	return &DefaultConsumer{
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
		{{$channelName}}Topic: {{$channelName}}Topic,
	{{- end}}
{{- end}}
	}, nil
}

func NewDefaultProducer(manager messaging.KafkaManager, config KafkaTopicConfig) (*DefaultProducer, error) {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Subscribe}}
	{{$channelName}}Topic, err := manager.CreateTopic({{$channelName}}TopicName, config.TopicGroup, config.NumPartitions, config.ReplicationFactor)
	if err != nil {
		return nil, err
	}
	{{- end}}
{{- end}}
	return &DefaultProducer{
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Subscribe}}
		{{$channelName}}Topic: {{$channelName}}Topic,
	{{- end}}
{{- end}}
	}, nil
}

{{ range $channelName, $channel := .Channels }}
{{- if $channel.Publish}}
func (d DefaultConsumer) Consume{{$channelName}}Event(callback messaging.CallbackFunction, errorCallback messaging.ErrorCallbackFunction) {
	d.{{$channelName}}Topic.Consume({{$channelName}}Event{}, callback, errorCallback)
}
{{- end}}
{{ end}}

{{ range $channelName, $channel := .Channels }}
{{- if $channel.Subscribe}}
func (d DefaultProducer) Produce{{$channelName}}Event(ctx context.Context, event {{$channelName}}Event, header ...messaging.KafkaHeader) error {
	err := d.{{$channelName}}Topic.Produce(ctx, event, header...)
	if err != nil {
		return err
	}
	return nil
}
{{- end}}
{{ end}}

