// Package events provides primitives to interact with the asyncAPI.
//
// Code generated by github.com/c0olix/asyncApiCodeGen DO NOT EDIT.
package events

import (
	"context"
	"git.hochbahn.cloud/mosaic/libs/go-microservice-starter-commons.git/messaging"
	{{- range $import := .Imports }}
	"{{$import}}"
	{{- end}}
)

const (
{{- range $channelName, $channel := .Channels }}
	{{$channelName}}TopicName = "{{$channel.Name}}"
{{- end}}
)

// KafkaTopicConfig Holds configuration needed fo create a kafka topic
type KafkaTopicConfig struct {
	TopicGroup string
	NumPartitions int
	ReplicationFactor int
}
{{ range $event := .Events }}
// {{$event.Message.Name}} {{$event.Message.Description}}
type {{$event.Message.Name}} struct {
	{{- range $propertyName, $property := $event.Message.Schema.Properties}}
	{{$propertyName}} {{$property.Type -}}
	{{- end}}
}
{{ end}}

{{ range $event := .Events }}
	{{- range $propertyName, $property := $event.Message.Schema.Properties}}
		{{- if $property.Object}}
// {{$property.Object.Name}} Nested object for {{$event.Message.Name}} type
type {{$property.Object.Name}} struct {
			{{- range $objPropertyName, $objProperty := $property.Object.Properties}}
	{{$objPropertyName}} {{$objProperty.Type -}}
			{{- end}}
}
		{{- end}}
    {{- if $property.Items}}
        {{- if $property.Items.Object}}
			// {{$property.Items.Object.Name}} Nested object for {{$event.Message.Name}} type
			type {{$property.Items.Object.Name}} struct {
      {{- range $objPropertyName, $objProperty := $property.Items.Object.Properties}}
          {{$objPropertyName}} {{$objProperty.Type -}}
      {{- end}}
			}
		{{- end}}
    {{- end}}
	{{- end}}
{{ end}}
// ConsumerInterface Interface for all events to be consumed by application
type ConsumerInterface interface {
{{ range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
	{{$channel.Publish.OperationId}}(callback messaging.CallbackFunction, errorCallback messaging.ErrorCallbackFunction)
	{{- end}}
{{- end}}
}
// ProducerInterface Interface for all events to be produced by application
type ProducerInterface interface {
{{ range $event := .Events }}
    {{- if eq $event.Typ "subscribe"}}
	{{$event.OperationId}}(ctx context.Context, event {{$event.Message.Name}}, header ...messaging.KafkaHeader) error
	{{- end}}
{{- end}}
}

// DefaultConsumer implements ConsumerInterface and consumes events with go kafka mosaic style flavor
type DefaultConsumer struct {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
	{{$channelName}}Topic messaging.KafkaTopic
	{{- end}}
{{- end}}
}

// DefaultProducer implements ProducerInterface and produces events with go kafka mosaic style flavor
type DefaultProducer struct {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Subscribe}}
	{{$channelName}}Topic messaging.KafkaTopic
	{{- end}}
{{- end}}
}

// NewDefaultConsumer wires all needed dependencies to create a DefaultConsumer
func NewDefaultConsumer(manager messaging.KafkaManager, config KafkaTopicConfig) (*DefaultConsumer, error) {
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
	{{$channelName}}Topic, err := manager.CreateTopic({{$channelName}}TopicName, config.TopicGroup, config.NumPartitions, config.ReplicationFactor)
	if err != nil {
		return nil, err
	}
	{{- end}}
{{- end}}
	return &DefaultConsumer{
{{- range $channelName, $channel := .Channels }}
	{{- if $channel.Publish}}
		{{$channelName}}Topic: {{$channelName}}Topic,
	{{- end}}
{{- end}}
	}, nil
}

// NewDefaultProducer wires all needed dependencies to create a DefaultProducer
func NewDefaultProducer(manager messaging.KafkaManager, config KafkaTopicConfig) (*DefaultProducer, error) {
{{- range $event := .Events }}
    {{- if eq $event.Typ "subscribe"}}
	{{$event.Topic}}Topic, err := manager.CreateTopic({{$event.Topic}}TopicName, config.TopicGroup, config.NumPartitions, config.ReplicationFactor)
	if err != nil {
		return nil, err
	}
	{{- end}}
{{- end}}
	return &DefaultProducer{
{{- range $event := .Events }}
    {{- if eq $event.Typ "subscribe"}}
		{{$event.Topic}}Topic: {{$event.Topic}}Topic,
	{{- end}}
{{- end}}
	}, nil
}

{{ range $event := .Events }}
{{- if eq $event.Typ "publish"}}
// {{$event.OperationId}} is the go kafka mosaic style flavored implementation of the ConsumerInterface registered on DefaultConsumer
// to consume the {{$event.Message.Name}} Event.
func (d DefaultConsumer) {{$event.OperationId}} (callback messaging.CallbackFunction, errorCallback messaging.ErrorCallbackFunction) {
	d.{{$event.Topic}}Topic.Consume({{$event.Message.Name}}{}, callback, errorCallback)
}
{{- end}}
{{ end}}

{{ range $event := .Events }}
    {{- if eq $event.Typ "subscribe"}}
//{{$event.OperationId}} is the go kafka mosaic style flavored implementation of the ProducerInterface registered on DefaultConsumer
// to produce the {{$event.Message.Name}} Event.
func (d DefaultProducer) {{$event.OperationId}}(ctx context.Context, event {{$event.Message.Name}}, header ...messaging.KafkaHeader) error {
	err := d.{{$event.Topic}}Topic.Produce(ctx, event, header...)
	if err != nil {
		return err
	}
	return nil
}
{{- end}}
{{ end}}

